stages:
  - test
  - build
  - deploy

docker-build-master:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE/trading_bot:latest" .
    - docker push "$CI_REGISTRY_IMAGE/trading_bot:latest"
  only:
    - master

docker-build-uat:
  # Official docker image.
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE/trading_bot:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE/trading_bot:$CI_COMMIT_REF_SLUG"
  only:
    - uat

unit-test:
  stage: test
  image: python
  script:
    - pip install -r requirements.txt
    - pytest test/

deploy-to-do-droplets:
  stage: deploy
  script:
    - eval "$(ssh-agent -s)"
    - echo "$GITLAB_RUNNER_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - echo "$GITLAB_RUNNER_PRIVATE_KEY" > gitlab_runner
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - mv gitlab_runner ~/.ssh/
    - scp -o StrictHostKeyChecking=no -o LogLevel=QUIET update_containers.sh server_init_setup_script.sh docker-compose.yml core@$DO_DROPLET_SSH_URL:~/
    - ssh -t -t -o StrictHostKeyChecking=no -o LogLevel=QUIET core@$DO_DROPLET_SSH_URL "bash /home/core/update_containers.sh"
  only:
    - master